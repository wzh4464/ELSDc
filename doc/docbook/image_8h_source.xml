<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_image_8h_source" xml:lang="en-US">
<title>image.h</title>
<indexterm><primary>src/image.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_image_8h_source_1l00001"/>00001 <emphasis role="comment">/*------------------------------------------------------------------------------</emphasis>
<anchor xml:id="_image_8h_source_1l00002"/>00002 <emphasis role="comment"></emphasis>
<anchor xml:id="_image_8h_source_1l00003"/>00003 <emphasis role="comment">&#32;&#32;Copyright&#32;(c)&#32;2007-2011&#32;rafael&#32;grompone&#32;von&#32;gioi&#32;(grompone@gmail.com)&#32;</emphasis>
<anchor xml:id="_image_8h_source_1l00004"/>00004 <emphasis role="comment">&#32;&#32;Copyright&#32;(c)&#32;2012-2014&#32;viorica&#32;patraucean&#32;(vpatrauc@gmail.com)</emphasis>
<anchor xml:id="_image_8h_source_1l00005"/>00005 <emphasis role="comment"></emphasis>
<anchor xml:id="_image_8h_source_1l00006"/>00006 <emphasis role="comment">&#32;&#32;This&#32;program&#32;is&#32;free&#32;software:&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify</emphasis>
<anchor xml:id="_image_8h_source_1l00007"/>00007 <emphasis role="comment">&#32;&#32;it&#32;under&#32;the&#32;terms&#32;of&#32;the&#32;GNU&#32;Affero&#32;General&#32;Public&#32;License&#32;as</emphasis>
<anchor xml:id="_image_8h_source_1l00008"/>00008 <emphasis role="comment">&#32;&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation,&#32;either&#32;version&#32;3&#32;of&#32;the</emphasis>
<anchor xml:id="_image_8h_source_1l00009"/>00009 <emphasis role="comment">&#32;&#32;License,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later&#32;version.</emphasis>
<anchor xml:id="_image_8h_source_1l00010"/>00010 <emphasis role="comment"></emphasis>
<anchor xml:id="_image_8h_source_1l00011"/>00011 <emphasis role="comment">&#32;&#32;This&#32;program&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
<anchor xml:id="_image_8h_source_1l00012"/>00012 <emphasis role="comment">&#32;&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
<anchor xml:id="_image_8h_source_1l00013"/>00013 <emphasis role="comment">&#32;&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;See&#32;the</emphasis>
<anchor xml:id="_image_8h_source_1l00014"/>00014 <emphasis role="comment">&#32;&#32;GNU&#32;Affero&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
<anchor xml:id="_image_8h_source_1l00015"/>00015 <emphasis role="comment"></emphasis>
<anchor xml:id="_image_8h_source_1l00016"/>00016 <emphasis role="comment">&#32;&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;Affero&#32;General&#32;Public&#32;License</emphasis>
<anchor xml:id="_image_8h_source_1l00017"/>00017 <emphasis role="comment">&#32;&#32;along&#32;with&#32;this&#32;program.&#32;If&#32;not,&#32;see&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
<anchor xml:id="_image_8h_source_1l00018"/>00018 <emphasis role="comment"></emphasis>
<anchor xml:id="_image_8h_source_1l00019"/>00019 <emphasis role="comment">&#32;&#32;image.h&#32;-&#32;This&#32;file&#32;belongs&#32;to&#32;ELSDc&#32;project&#32;(Ellipse&#32;and&#32;Line&#32;Segment&#32;</emphasis>
<anchor xml:id="_image_8h_source_1l00020"/>00020 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Detector&#32;with&#32;continuous&#32;validation).</emphasis>
<anchor xml:id="_image_8h_source_1l00021"/>00021 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;It&#32;defines&#32;data&#32;structures&#32;for&#32;char&#32;/&#32;int&#32;/&#32;double&#32;images,&#32;function&#32;</emphasis>
<anchor xml:id="_image_8h_source_1l00022"/>00022 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prototypes&#32;to&#32;free&#32;/&#32;allocate&#32;/&#32;allocate&#32;and&#32;initialize&#32;these&#32;</emphasis>
<anchor xml:id="_image_8h_source_1l00023"/>00023 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;structures,&#32;and&#32;prototype&#32;for&#32;image&#32;gradient&#32;computation.&#32;</emphasis>
<anchor xml:id="_image_8h_source_1l00024"/>00024 <emphasis role="comment"></emphasis>
<anchor xml:id="_image_8h_source_1l00025"/>00025 <emphasis role="comment">&#32;&#32;----------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="_image_8h_source_1l00026"/>00026 
<anchor xml:id="_image_8h_source_1l00027"/>00027 <emphasis role="preprocessor">#ifndef&#32;IMAGE_H</emphasis>
<anchor xml:id="_image_8h_source_1l00028"/>00028 <emphasis role="preprocessor">#define&#32;IMAGE_H</emphasis>
<anchor xml:id="_image_8h_source_1l00029"/>00029 
<anchor xml:id="_image_8h_source_1l00030"/>00030 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_misc_8h">misc.h</link>&quot;</emphasis>
<anchor xml:id="_image_8h_source_1l00031"/>00031 
<anchor xml:id="_image_8h_source_1l00032"/>00032 <emphasis role="comment">/*----------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="_image_8h_source_1l00035"/><link linkend="_structImageChar">00035</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structImageChar">ImageChar</link>
<anchor xml:id="_image_8h_source_1l00036"/>00036 {&#32;
<anchor xml:id="_image_8h_source_1l00037"/><link linkend="_structImageChar_1ac24cea2bfcc927fd29bc74d1086707d8">00037</link> &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_structImageChar_1ac24cea2bfcc927fd29bc74d1086707d8">data</link>;
<anchor xml:id="_image_8h_source_1l00038"/><link linkend="_structImageChar_1aa4b0263c533c5ce471067bd5ede24477">00038</link> &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structImageChar_1aa4b0263c533c5ce471067bd5ede24477">xsize</link>,&#32;<link linkend="_structImageChar_1a7e7fdb6b4d76fd619024da6878c27d58">ysize</link>;
<anchor xml:id="_image_8h_source_1l00039"/><link linkend="_image_8h_1abf368707b04976a0552dab4473f28b27">00039</link> }&#32;*<link linkend="_image_8h_1abf368707b04976a0552dab4473f28b27">PImageChar</link>;&#32;<emphasis role="comment">/*&#32;pointer&#32;to&#32;ImageChar&#32;*/</emphasis>
<anchor xml:id="_image_8h_source_1l00040"/>00040 
<anchor xml:id="_image_8h_source_1l00041"/>00041 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_image_8h_1aa58f34a2b6c4700cbd956f820418bdee">free_PImageChar</link>(&#32;<link linkend="_structImageChar">PImageChar</link>&#32;i&#32;);
<anchor xml:id="_image_8h_source_1l00042"/>00042 <link linkend="_structImageChar">PImageChar</link>&#32;<link linkend="_image_8h_1a7e4805b775ae0ce63216d5e7fac3d99b">new_PImageChar</link>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;xsize,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ysize&#32;);
<anchor xml:id="_image_8h_source_1l00043"/>00043 <link linkend="_structImageChar">PImageChar</link>&#32;<link linkend="_image_8h_1a93f3134419a437219c46bc206a210bbb">new_PImageChar_ini</link>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;xsize,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ysize,
<anchor xml:id="_image_8h_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;fill_value&#32;);
<anchor xml:id="_image_8h_source_1l00045"/>00045 
<anchor xml:id="_image_8h_source_1l00046"/>00046 
<anchor xml:id="_image_8h_source_1l00047"/>00047 <emphasis role="comment">/*----------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="_image_8h_source_1l00050"/><link linkend="_structImageInt">00050</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structImageInt">ImageInt</link>
<anchor xml:id="_image_8h_source_1l00051"/>00051 {
<anchor xml:id="_image_8h_source_1l00052"/><link linkend="_structImageInt_1ac103627c1ad15cbec2f22d0abe6d54b6">00052</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;*<link linkend="_structImageInt_1ac103627c1ad15cbec2f22d0abe6d54b6">data</link>;
<anchor xml:id="_image_8h_source_1l00053"/><link linkend="_structImageInt_1aa4b0263c533c5ce471067bd5ede24477">00053</link> &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structImageInt_1aa4b0263c533c5ce471067bd5ede24477">xsize</link>,&#32;<link linkend="_structImageInt_1a7e7fdb6b4d76fd619024da6878c27d58">ysize</link>;
<anchor xml:id="_image_8h_source_1l00054"/><link linkend="_image_8h_1ad2f6828b30c727a557c8c201c2913f0f">00054</link> }&#32;*<link linkend="_image_8h_1ad2f6828b30c727a557c8c201c2913f0f">PImageInt</link>;&#32;<emphasis role="comment">/*&#32;pointer&#32;to&#32;ImageInt&#32;*/</emphasis>
<anchor xml:id="_image_8h_source_1l00055"/>00055 
<anchor xml:id="_image_8h_source_1l00056"/>00056 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_image_8h_1a6ee6bd84de84b9c43d96a7daf535ccd3">free_PImageInt</link>(&#32;<link linkend="_structImageInt">PImageInt</link>&#32;i&#32;);
<anchor xml:id="_image_8h_source_1l00057"/>00057 <link linkend="_structImageInt">PImageInt</link>&#32;<link linkend="_image_8h_1a24e8904b30314d7539fdcc505a26cf07">new_PImageInt</link>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;xsize,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ysize&#32;);
<anchor xml:id="_image_8h_source_1l00058"/>00058 <link linkend="_structImageInt">PImageInt</link>&#32;<link linkend="_image_8h_1aa54fa4ed5a519b86fb3264668ff6655f">new_PImageInt_ini</link>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;xsize,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ysize,
<anchor xml:id="_image_8h_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;fill_value&#32;);
<anchor xml:id="_image_8h_source_1l00060"/>00060 
<anchor xml:id="_image_8h_source_1l00061"/>00061 
<anchor xml:id="_image_8h_source_1l00062"/>00062 <emphasis role="comment">/*----------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="_image_8h_source_1l00065"/><link linkend="_structImageDouble">00065</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structImageDouble">ImageDouble</link>
<anchor xml:id="_image_8h_source_1l00066"/>00066 {
<anchor xml:id="_image_8h_source_1l00067"/><link linkend="_structImageDouble_1a23436a7a2b44939627b59df11be7ad75">00067</link> &#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;*<link linkend="_structImageDouble_1a23436a7a2b44939627b59df11be7ad75">data</link>;
<anchor xml:id="_image_8h_source_1l00068"/><link linkend="_structImageDouble_1aa4b0263c533c5ce471067bd5ede24477">00068</link> &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structImageDouble_1aa4b0263c533c5ce471067bd5ede24477">xsize</link>,&#32;<link linkend="_structImageDouble_1a7e7fdb6b4d76fd619024da6878c27d58">ysize</link>;
<anchor xml:id="_image_8h_source_1l00069"/><link linkend="_image_8h_1ae20deac149c624780e3492d96ed9b771">00069</link> }&#32;*<link linkend="_image_8h_1ae20deac149c624780e3492d96ed9b771">PImageDouble</link>;&#32;<emphasis role="comment">/*&#32;pointer&#32;to&#32;ImageDouble&#32;*/</emphasis>
<anchor xml:id="_image_8h_source_1l00070"/>00070 
<anchor xml:id="_image_8h_source_1l00071"/>00071 
<anchor xml:id="_image_8h_source_1l00072"/>00072 <emphasis role="comment">/*----------------------------------------------------------------------------*/</emphasis>
<anchor xml:id="_image_8h_source_1l00075"/><link linkend="_image_8h_1a9caa0284a00a0528cb868b69a5ad5370">00075</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlist">list</link>&#32;<link linkend="_structlist">CoordList</link>;
<anchor xml:id="_image_8h_source_1l00076"/><link linkend="_structlist">00076</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlist">list</link>&#32;
<anchor xml:id="_image_8h_source_1l00077"/>00077 {
<anchor xml:id="_image_8h_source_1l00078"/><link linkend="_structlist_1a6150e0515f7202e2fb518f7206ed97dc">00078</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structlist_1a6150e0515f7202e2fb518f7206ed97dc">x</link>,&#32;<link linkend="_structlist_1a0a2f84ed7838f07779ae24c5a9086d33">y</link>;
<anchor xml:id="_image_8h_source_1l00079"/><link linkend="_structlist_1a7d9504c931be4ef8f9755e0065d27489">00079</link> &#32;&#32;<link linkend="_structlist">CoordList</link>&#32;*<link linkend="_structlist_1a7d9504c931be4ef8f9755e0065d27489">next</link>;
<anchor xml:id="_image_8h_source_1l00080"/>00080 };
<anchor xml:id="_image_8h_source_1l00081"/>00081 
<anchor xml:id="_image_8h_source_1l00082"/>00082 
<anchor xml:id="_image_8h_source_1l00083"/>00083 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_image_8h_1a65f922be2f5afbbcdb04645cb8f8bbfb">free_PImageDouble</link>(&#32;<link linkend="_structImageDouble">PImageDouble</link>&#32;i&#32;);
<anchor xml:id="_image_8h_source_1l00084"/>00084 <link linkend="_structImageDouble">PImageDouble</link>&#32;<link linkend="_image_8h_1a5baadc47eb068cd9e3b2d52a5065e3c0">new_PImageDouble</link>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;xsize,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ysize&#32;);
<anchor xml:id="_image_8h_source_1l00085"/>00085 <link linkend="_structImageDouble">PImageDouble</link>&#32;<link linkend="_image_8h_1a366212b692e1b18885cb5b137c656a9d">new_PImageDouble_ini</link>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;xsize,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ysize,
<anchor xml:id="_image_8h_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;fill_value&#32;);
<anchor xml:id="_image_8h_source_1l00087"/>00087 
<anchor xml:id="_image_8h_source_1l00088"/>00088 <link linkend="_structImageDouble">PImageDouble</link>&#32;<link linkend="_image_8h_1a51ef0a087c0699dffd084d8930fa7377">img_gradient_angle</link>(&#32;<link linkend="_structImageDouble">PImageDouble</link>&#32;in,&#32;<emphasis role="keywordtype">double</emphasis>&#32;threshold&#32;);
<anchor xml:id="_image_8h_source_1l00089"/>00089 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_image_8h_1a0312c9c68ef16da181121d5f105caf33">img_gradient_sort</link>(&#32;<link linkend="_structImageDouble">PImageDouble</link>&#32;in,&#32;<emphasis role="keywordtype">double</emphasis>&#32;threshold,&#32;<link linkend="_structlist">CoordList</link>&#32;**list_p,&#32;
<anchor xml:id="_image_8h_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;**mem_p,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;n_bins,&#32;<emphasis role="keywordtype">double</emphasis>&#32;max_grad,&#32;
<anchor xml:id="_image_8h_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structImageDouble">PImageDouble</link>&#32;*angles,&#32;<link linkend="_structImageDouble">PImageDouble</link>&#32;*gradmag,&#32;
<anchor xml:id="_image_8h_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structImageDouble">PImageDouble</link>&#32;*gradx,&#32;<link linkend="_structImageDouble">PImageDouble</link>&#32;*grady&#32;);
<anchor xml:id="_image_8h_source_1l00093"/>00093 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_image_8h_1a23026d70139f0859bae4a5723784f1fc">mark_img_pts</link>(&#32;<link linkend="_structImageInt">PImageInt</link>&#32;im,&#32;<link linkend="_structPoint">Point</link>&#32;*pts,&#32;<emphasis role="keywordtype">int</emphasis>&#32;start,&#32;<emphasis role="keywordtype">int</emphasis>&#32;end,&#32;<emphasis role="keywordtype">int</emphasis>&#32;label&#32;);
<anchor xml:id="_image_8h_source_1l00094"/>00094 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_image_8h_1a7d75c600cc492bd8efbc1cc0c3819d88">in_image</link>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;xsize,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ysize);
<anchor xml:id="_image_8h_source_1l00095"/>00095 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_image_8h_1a9d7c27ae8502d7bb6ef83ddd1e95df95">local_max</link>(&#32;<link linkend="_structImageDouble">PImageDouble</link>&#32;im,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y&#32;);
<anchor xml:id="_image_8h_source_1l00096"/>00096 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
